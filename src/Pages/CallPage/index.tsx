import React, { useState } from 'react'
import TaxiCallCard from '../../Components/CallCard'
import useTaxiCalls from '../../hooks/useTaxiCalls'
import './style.less'

const TaxiCallList: React.FC = () => {
  const { calls, loading, error, refetch, updateCallStatus, createCall } = useTaxiCalls();
  const [filter, setFilter] = useState<string>('all');
  const [generating, setGenerating] = useState(false);

  const filteredCalls = calls.filter(call => {
    if (filter === 'all') return true;
    return call.status === filter;
  });

  const getStatusCounts = () => {
    const counts = {
      all: calls.length,
      pending: calls.filter(c => c.status === 'pending').length,
      accepted: calls.filter(c => c.status === 'accepted').length,
      completed: calls.filter(c => c.status === 'completed').length,
      cancelled: calls.filter(c => c.status === 'cancelled').length,
      no_answer: calls.filter(c => c.status === 'no_answer').length
    };
    return counts;
  };

  const counts = getStatusCounts();

  const generateRandomCall = async () => {
    setGenerating(true);
    
    try {
      const clientNames = [
        '–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞', '–ú–∏—Ö–∞–∏–ª –°–∏–¥–æ—Ä–æ–≤', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –í–æ–ª–∫–æ–≤–∞', '–î–º–∏—Ç—Ä–∏–π –ú–æ—Ä–æ–∑–æ–≤',
        '–û–ª—å–≥–∞ –ü–µ—Ç—Ä–æ–≤–∞', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ö—É–∑–Ω–µ—Ü–æ–≤', '–ú–∞—Ä–∏—è –°–º–∏—Ä–Ω–æ–≤–∞', '–°–µ—Ä–≥–µ–π –ü–æ–ø–æ–≤',
        '–ò—Ä–∏–Ω–∞ –í–∞—Å–∏–ª—å–µ–≤–∞', '–ê–Ω–¥—Ä–µ–π –ù–æ–≤–∏–∫–æ–≤', '–ï–ª–µ–Ω–∞ –ú–∏—Ö–∞–π–ª–æ–≤–∞', '–í–ª–∞–¥–∏–º–∏—Ä –§–µ–¥–æ—Ä–æ–≤'
      ];
      
      const phones = [
        '+79991234567', '+79992345678', '+79993456789', '+79994567890',
        '+79995678901', '+79996789012', '+79997890123', '+79998901234'
      ];
      
      const addresses = [
        '—É–ª. –õ–µ–Ω–∏–Ω–∞, 25', '–ø—Ä. –ü–æ–±–µ–¥—ã, 10', '—É–ª. –ì–∞–≥–∞—Ä–∏–Ω–∞, 15', '–∞—ç—Ä–æ–ø–æ—Ä—Ç –î–æ–º–æ–¥–µ–¥–æ–≤–æ',
        '–¢–¶ "–ï–≤—Ä–æ–ø–∞", –ø—Ä. –ú–∏—Ä–∞, 50', '—É–ª. –ü—É—à–∫–∏–Ω–∞, 30', '–ñ/–¥ –≤–æ–∫–∑–∞–ª', '—É–ª. –°–æ–≤–µ—Ç—Å–∫–∞—è, 8',
        '–¢–†–¶ "–ì–ª–æ–±—É—Å"', '—É–ª. –ù–æ–≤–∞—è, 45', '–ø—Ä. –ú–∏—Ä–∞, 100', '—É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è, 5'
      ];
      
      const drivers = [
        '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤', '–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤', '–°–µ—Ä–≥–µ–π –ù–æ–≤–∏–∫–æ–≤', '–ú–∏—Ö–∞–∏–ª –°–º–∏—Ä–Ω–æ–≤',
        '–î–º–∏—Ç—Ä–∏–π –í–∞—Å–∏–ª—å–µ–≤', '–ê–Ω–¥—Ä–µ–π –ü–æ–ø–æ–≤', '–í–ª–∞–¥–∏–º–∏—Ä –ú–∏—Ö–∞–π–ª–æ–≤'
      ];
      
      const cars = [
        'Toyota Camry', 'Honda Civic', 'Ford Focus', 'Volkswagen Passat',
        'BMW X5', 'Mercedes C-Class', 'Audi A4', 'Nissan Teana'
      ];
      
      const carNumbers = [
        '–ê123–ë–í777', '–í456–ì–î123', '–ï789–ñ–ó456', '–ò321–ö–õ987',
        '–ú654–ù–ü321', '–û987–†–°654', '–¢321–£–§987', '–•654–ß–®321'
      ];

      const randomClientName = clientNames[Math.floor(Math.random() * clientNames.length)];
      const randomPhone = phones[Math.floor(Math.random() * phones.length)];
      const randomPickup = addresses[Math.floor(Math.random() * addresses.length)];
      const randomDestination = addresses[Math.floor(Math.random() * addresses.length)];
      
      const statuses = ['pending', 'pending', 'pending', 'accepted', 'completed'];
      const randomStatus = statuses[Math.floor(Math.random() * statuses.length)];
      
      const callData = {
        clientName: randomClientName,
        clientPhone: randomPhone,
        pickupAddress: randomPickup,
        destinationAddress: randomDestination,
        status: randomStatus,
        callTime: new Date().toISOString(),
        ...(randomStatus !== 'pending' && {
          driverName: drivers[Math.floor(Math.random() * drivers.length)],
          carModel: cars[Math.floor(Math.random() * cars.length)],
          carNumber: carNumbers[Math.floor(Math.random() * carNumbers.length)],
          price: Math.floor(Math.random() * 1000) + 200, 
          duration: Math.floor(Math.random() * 60) + 5,
          distance: parseFloat((Math.random() * 30 + 2).toFixed(1)) 
        })
      };

      await createCall(callData);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã–∑–æ–≤–∞:', error);
    } finally {
      setGenerating(false);
    }
  };

  if (loading) {
    return (
      <div className="taxi-call-list">
        <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–∑–æ–≤–æ–≤ —Ç–∞–∫—Å–∏...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="taxi-call-list">
        <div className="error">
          <p>–û—à–∏–±–∫–∞: {error}</p>
          <button onClick={refetch}>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É</button>
        </div>
      </div>
    );
  }

  return (
    <div className="taxi-call-list">
      <div className="taxi-call-list-header">
        <h2>–í—ã–∑–æ–≤—ã —Ç–∞–∫—Å–∏ ({filteredCalls.length})</h2>
        <div className="header-actions">
          <button 
            onClick={generateRandomCall} 
            className="generate-btn" 
            disabled={generating}
            title="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–∑–æ–≤"
          >
            {generating ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : 'üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—ã–∑–æ–≤'}
          </button>
          <button onClick={refetch} className="refresh-btn">
            –û–±–Ω–æ–≤–∏—Ç—å
          </button>
        </div>
      </div>
      
      <div className="taxi-call-filters">
        <button 
          className={filter === 'all' ? 'filter-btn active' : 'filter-btn'}
          onClick={() => setFilter('all')}
        >
          –í—Å–µ ({counts.all})
        </button>
        <button 
          className={filter === 'pending' ? 'filter-btn active' : 'filter-btn'}
          onClick={() => setFilter('pending')}
        >
          –û–∂–∏–¥–∞—é—Ç ({counts.pending})
        </button>
        <button 
          className={filter === 'accepted' ? 'filter-btn active' : 'filter-btn'}
          onClick={() => setFilter('accepted')}
        >
          –í –ø—É—Ç–∏ ({counts.accepted})
        </button>
        <button 
          className={filter === 'completed' ? 'filter-btn active' : 'filter-btn'}
          onClick={() => setFilter('completed')}
        >
          –ó–∞–≤–µ—Ä—à–µ–Ω—ã ({counts.completed})
        </button>
        <button 
          className={filter === 'cancelled' ? 'filter-btn active' : 'filter-btn'}
          onClick={() => setFilter('cancelled')}
        >
          –û—Ç–º–µ–Ω–µ–Ω—ã ({counts.cancelled})
        </button>
      </div>
      
      {filteredCalls.length === 0 ? (
        <div className="no-calls">
          {filter === 'all' ? '–í—ã–∑–æ–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : `–ù–µ—Ç –≤—ã–∑–æ–≤–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${getStatusText(filter)}"`}
        </div>
      ) : (
        <div className="taxi-calls-list">
          {filteredCalls.map((call) => (
            <TaxiCallCard 
              key={call.id} 
              call={call} 
              onUpdateStatus={updateCallStatus}
            />
          ))}
        </div>
      )}
    </div>
  );
};

const getStatusText = (status: string) => {
  switch (status) {
    case 'pending': return '–æ–∂–∏–¥–∞—é—Ç';
    case 'accepted': return '–≤ –ø—É—Ç–∏';
    case 'completed': return '–∑–∞–≤–µ—Ä—à–µ–Ω—ã';
    case 'cancelled': return '–æ—Ç–º–µ–Ω–µ–Ω—ã';
    case 'no_answer': return '–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞';
    default: return status;
  }
};

export default TaxiCallList;